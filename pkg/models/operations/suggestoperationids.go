// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type Schema struct {
	// This field accepts []byte data or io.Reader implementations, such as *os.File.
	Content  any    `multipartForm:"content"`
	FileName string `multipartForm:"name=schema"`
}

func (o *Schema) GetContent() any {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *Schema) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

// SuggestOperationIDsRequestBody - The schema file to upload provided as a multipart/form-data file segment.
type SuggestOperationIDsRequestBody struct {
	Opts   *shared.SuggestOperationIDsOpts `multipartForm:"name=opts,json"`
	Schema Schema                          `multipartForm:"file"`
}

func (o *SuggestOperationIDsRequestBody) GetOpts() *shared.SuggestOperationIDsOpts {
	if o == nil {
		return nil
	}
	return o.Opts
}

func (o *SuggestOperationIDsRequestBody) GetSchema() Schema {
	if o == nil {
		return Schema{}
	}
	return o.Schema
}

type SuggestOperationIDsRequest struct {
	// The schema file to upload provided as a multipart/form-data file segment.
	RequestBody SuggestOperationIDsRequestBody `request:"mediaType=multipart/form-data"`
	// Max number of suggestions to request
	Limit      *float64 `queryParam:"style=form,explode=true,name=limit"`
	XSessionID string   `header:"style=simple,explode=false,name=x-session-id"`
}

func (o *SuggestOperationIDsRequest) GetRequestBody() SuggestOperationIDsRequestBody {
	if o == nil {
		return SuggestOperationIDsRequestBody{}
	}
	return o.RequestBody
}

func (o *SuggestOperationIDsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SuggestOperationIDsRequest) GetXSessionID() string {
	if o == nil {
		return ""
	}
	return o.XSessionID
}

type SuggestOperationIDsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	SuggestedOperationIDs *shared.SuggestedOperationIDs
}

func (o *SuggestOperationIDsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SuggestOperationIDsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SuggestOperationIDsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *SuggestOperationIDsResponse) GetSuggestedOperationIDs() *shared.SuggestedOperationIDs {
	if o == nil {
		return nil
	}
	return o.SuggestedOperationIDs
}
